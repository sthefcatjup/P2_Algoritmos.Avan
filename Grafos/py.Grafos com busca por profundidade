
using namespace std;

class Grafo {
public:
    Grafo(int max, int valorarestanula);
    ~Grafo();

    void inserevertice(TipoItem item);
    void inserearesta(TipoItem Nosaida, TipoItem Noentrada, int peso);
    void buscaemprofundidade(TipoItem origem, TipoItem destino);
    void imprimirvertices();

private:
    int maxvertices;
    int numvertices;
    int arestanula;

    TipoItem* vertices;
    int** matrizadjacencias;
    bool* marcador;

    int obterindice(TipoItem item);
    void limpamarcador();
    int obtergrau(TipoItem item);
};

Grafo::Grafo(int max, int valorarestanula)
    : numvertices(0), maxvertices(max), arestanula(valorarestanula)
{
    marcador = new bool[maxvertices];
    vertices = new TipoItem[maxvertices];
    matrizadjacencias = new int*[maxvertices];
    for (int i = 0; i < maxvertices; i++) {
        matrizadjacencias[i] = new int[maxvertices];
    }

    for (int i = 0; i < maxvertices; i++) {
        for (int j = 0; j < maxvertices; j++) {
            matrizadjacencias[i][j] = arestanula;
        }
    }
}

Grafo::~Grafo()
{
    delete[] vertices;
    for (int i = 0; i < maxvertices; i++) {
        delete[] matrizadjacencias[i];
    }
    delete[] matrizadjacencias;
    delete[] marcador;
}

int Grafo::obterindice(TipoItem item)
{
    int indice = 0;
    while (item != vertices[indice]) {
        indice++;
    }
    return indice;
}

void Grafo::inserevertice(TipoItem item)
{
    if (numvertices < maxvertices) {
        vertices[numvertices] = item;
        numvertices++;
    } else {
        cout << "O numero maximo de vertices foi alcancado!\n";
    }
}

void Grafo::inserearesta(TipoItem Nosaida, TipoItem Noentrada, int peso)
{
    int linha = obterindice(Nosaida);
    int coluna = obterindice(Noentrada);

    matrizadjacencias[linha][coluna] = peso;
    // Uncomment the following line for undirected graphs:
    // matrizadjacencias[coluna][linha] = peso;
}

void Grafo::limpamarcador()
{
    for (int i = 0; i < maxvertices; i++) {
        marcador[i] = false;
    }
}

void Grafo::buscaemprofundidade(TipoItem origem, TipoItem destino)
{
    limpamarcador();
    int origemIndice = obterindice(origem);
    int destinoIndice = obterindice(destino);
    bool encontrado = false;

    std::function<void(int)> dfs = [&](int vertice) {
        marcador[vertice] = true;
        if (vertice == destinoIndice) {
            encontrado = true;
            return;
        }
        for (int i = 0; i < numvertices; i++) {
            if (matrizadjacencias[vertice][i] != arestanula && !marcador[i]) {
                cout << "Visitando: " << vertices[i] << endl;
                dfs(i);
            }
        }
    };

    cout << "Iniciando Busca em Profundidade a partir de: " << origem << endl;
    dfs(origemIndice);
    cout << "Caminho " << (encontrado ? "" : "Nao ") << "Encontrado" << endl;
}

void Grafo::imprimirvertices()
{
    cout << "Lista de Vertices:\n";
    for (int i = 0; i < numvertices; i++) {
        cout << i << ": " << vertices[i] << endl;
    }
}

int main() {
    Grafo grafo(10, -1);

    grafo.inserevertice('A');
    grafo.inserevertice('B');
    grafo.inserevertice('C');
    grafo.inserevertice('D');
    grafo.inserevertice('E');
    grafo.inserevertice('F');
    grafo.inserevertice('G');
    grafo.inserevertice('H');
    grafo.inserevertice('I');
    grafo.inserevertice('J');

    grafo.inserearesta('A', 'B', 1);
    grafo.inserearesta('A', 'C', 1);
    grafo.inserearesta('B', 'D', 1);
    grafo.inserearesta('B', 'E', 1);
    grafo.inserearesta('C', 'F', 1);
    grafo.inserearesta('D', 'G', 1);
    grafo.inserearesta('E', 'H', 1);
    grafo.inserearesta('F', 'I', 1);
    grafo.inserearesta('G', 'J', 1);

    grafo.buscaemprofundidade('A', 'H');

    return 0;
}
