class Grafo:
    def __init__(self, vertices):
        self.V = vertices
        self.grafo = []

    def adicionar_aresta(self, u, v, w):
        self.grafo.append([u, v, w])

    def encontrar(self, parent, i):
        if parent[i] == i:
            return i
        return self.encontrar(parent, parent[i])

    def unir(self, parent, rank, x, y):
        x_raiz = self.encontrar(parent, x)
        y_raiz = self.encontrar(parent, y)

        if rank[x_raiz] < rank[y_raiz]:
            parent[x_raiz] = y_raiz
        elif rank[x_raiz] > rank[y_raiz]:
            parent[y_raiz] = x_raiz
        else:
            parent[y_raiz] = x_raiz
            rank[x_raiz] += 1

    def kruskal(self):
        resultado = []
        i, e = 0, 0

        self.grafo = sorted(self.grafo, key=lambda item: item[2])

        parent = []
        rank = []

        for node in range(self.V):
            parent.append(node)
            rank.append(0)

        while e < self.V - 1:
            u, v, w = self.grafo[i]
            i += 1
            x = self.encontrar(parent, u)
            y = self.encontrar(parent, v)

            if x != y:
                e += 1
                resultado.append([u, v, w])
                self.unir(parent, rank, x, y)

        return resultado


# Exemplo de uso
grafo = Grafo(4)
grafo.adicionar_aresta(0, 1, 10)
grafo.adicionar_aresta(0, 2, 6)
grafo.adicionar_aresta(0, 3, 4)
grafo.adicionar_aresta(1, 3, 15)
grafo.adicionar_aresta(2, 3, 4)

resultado_kruskal = grafo.kruskal()

print("Arestas da Árvore Geradora Mínima:")
for u, v, w in resultado_kruskal:
    print(f"{u} - {v} | Peso: {w}")
